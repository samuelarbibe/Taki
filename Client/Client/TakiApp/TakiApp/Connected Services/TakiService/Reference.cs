//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TakiApp.TakiService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="CardList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="Card")]
    public class CardList : System.Collections.ObjectModel.ObservableCollection<TakiApp.TakiService.Card> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Card", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    public partial class Card : TakiApp.TakiService.BaseEntity {
        
        private TakiApp.TakiService.Color ColorField;
        
        private string ImageField;
        
        private bool SpecialField;
        
        private TakiApp.TakiService.Value ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TakiApp.TakiService.Color Color {
            get {
                return this.ColorField;
            }
            set {
                if ((this.ColorField.Equals(value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Special {
            get {
                return this.SpecialField;
            }
            set {
                if ((this.SpecialField.Equals(value) != true)) {
                    this.SpecialField = value;
                    this.RaisePropertyChanged("Special");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TakiApp.TakiService.Value Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseEntity", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TakiApp.TakiService.User))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TakiApp.TakiService.Player))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TakiApp.TakiService.Game))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TakiApp.TakiService.Message))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TakiApp.TakiService.Card))]
    public partial class BaseEntity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TakiApp.TakiService.Player))]
    public partial class User : TakiApp.TakiService.BaseEntity {
        
        private bool AdminField;
        
        private string FirstNameField;
        
        private string LastNameField;
        
        private int LevelField;
        
        private int LossesField;
        
        private string PasswordField;
        
        private int ScoreField;
        
        private string UsernameField;
        
        private int WinsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Admin {
            get {
                return this.AdminField;
            }
            set {
                if ((this.AdminField.Equals(value) != true)) {
                    this.AdminField = value;
                    this.RaisePropertyChanged("Admin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Level {
            get {
                return this.LevelField;
            }
            set {
                if ((this.LevelField.Equals(value) != true)) {
                    this.LevelField = value;
                    this.RaisePropertyChanged("Level");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Losses {
            get {
                return this.LossesField;
            }
            set {
                if ((this.LossesField.Equals(value) != true)) {
                    this.LossesField = value;
                    this.RaisePropertyChanged("Losses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((this.ScoreField.Equals(value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Wins {
            get {
                return this.WinsField;
            }
            set {
                if ((this.WinsField.Equals(value) != true)) {
                    this.WinsField = value;
                    this.RaisePropertyChanged("Wins");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    public partial class Player : TakiApp.TakiService.User {
        
        private TakiApp.TakiService.CardList HandField;
        
        private int TempScoreField;
        
        private int UserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TakiApp.TakiService.CardList Hand {
            get {
                return this.HandField;
            }
            set {
                if ((object.ReferenceEquals(this.HandField, value) != true)) {
                    this.HandField = value;
                    this.RaisePropertyChanged("Hand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TempScore {
            get {
                return this.TempScoreField;
            }
            set {
                if ((this.TempScoreField.Equals(value) != true)) {
                    this.TempScoreField = value;
                    this.RaisePropertyChanged("TempScore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Game", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    public partial class Game : TakiApp.TakiService.BaseEntity {
        
        private System.DateTime EndTimeField;
        
        private int LoserField;
        
        private TakiApp.TakiService.PlayerList PlayersField;
        
        private System.DateTime StartTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Loser {
            get {
                return this.LoserField;
            }
            set {
                if ((this.LoserField.Equals(value) != true)) {
                    this.LoserField = value;
                    this.RaisePropertyChanged("Loser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TakiApp.TakiService.PlayerList Players {
            get {
                return this.PlayersField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayersField, value) != true)) {
                    this.PlayersField = value;
                    this.RaisePropertyChanged("Players");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    public partial class Message : TakiApp.TakiService.BaseEntity {
        
        private TakiApp.TakiService.Action ActionField;
        
        private TakiApp.TakiService.Card CardField;
        
        private int GameIdField;
        
        private int RecieverField;
        
        private TakiApp.TakiService.Player TargetField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TakiApp.TakiService.Action Action {
            get {
                return this.ActionField;
            }
            set {
                if ((this.ActionField.Equals(value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TakiApp.TakiService.Card Card {
            get {
                return this.CardField;
            }
            set {
                if ((object.ReferenceEquals(this.CardField, value) != true)) {
                    this.CardField = value;
                    this.RaisePropertyChanged("Card");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GameId {
            get {
                return this.GameIdField;
            }
            set {
                if ((this.GameIdField.Equals(value) != true)) {
                    this.GameIdField = value;
                    this.RaisePropertyChanged("GameId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Reciever {
            get {
                return this.RecieverField;
            }
            set {
                if ((this.RecieverField.Equals(value) != true)) {
                    this.RecieverField = value;
                    this.RaisePropertyChanged("Reciever");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TakiApp.TakiService.Player Target {
            get {
                return this.TargetField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetField, value) != true)) {
                    this.TargetField = value;
                    this.RaisePropertyChanged("Target");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Color", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    public enum Color : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Green = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Blue = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Red = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Yellow = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Multi = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Value", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    public enum Value : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Zero = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        One = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlusTwo = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Three = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Four = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Five = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Six = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Seven = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Eight = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Nine = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Stop = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Plus = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SwitchDirection = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Taki = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SwitchColor = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TakiAll = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SwitchColorAll = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SwitchHandAll = 17,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="PlayerList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="Player")]
    public class PlayerList : System.Collections.ObjectModel.ObservableCollection<TakiApp.TakiService.Player> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Action", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    public enum Action : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Add = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Remove = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NextTurn = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlayerQuit = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SwitchRotation = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SwitchHand = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlusTwo = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Win = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Loss = 8,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="MessageList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="Message")]
    public class MessageList : System.Collections.ObjectModel.ObservableCollection<TakiApp.TakiService.Message> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="GameList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="Game")]
    public class GameList : System.Collections.ObjectModel.ObservableCollection<TakiApp.TakiService.Game> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="UserList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="User")]
    public class UserList : System.Collections.ObjectModel.ObservableCollection<TakiApp.TakiService.User> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TakiService.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetCardList", ReplyAction="http://tempuri.org/IService/GetCardListResponse")]
        System.IAsyncResult BeginGetCardList(System.AsyncCallback callback, object asyncState);
        
        TakiApp.TakiService.CardList EndGetCardList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/BuildDeck", ReplyAction="http://tempuri.org/IService/BuildDeckResponse")]
        System.IAsyncResult BeginBuildDeck(System.AsyncCallback callback, object asyncState);
        
        TakiApp.TakiService.CardList EndBuildDeck(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/StartGame", ReplyAction="http://tempuri.org/IService/StartGameResponse")]
        System.IAsyncResult BeginStartGame(TakiApp.TakiService.Player p, int playerCount, System.AsyncCallback callback, object asyncState);
        
        TakiApp.TakiService.Game EndStartGame(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetPlayerList", ReplyAction="http://tempuri.org/IService/GetPlayerListResponse")]
        System.IAsyncResult BeginGetPlayerList(System.AsyncCallback callback, object asyncState);
        
        TakiApp.TakiService.PlayerList EndGetPlayerList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/AddAction", ReplyAction="http://tempuri.org/IService/AddActionResponse")]
        System.IAsyncResult BeginAddAction(TakiApp.TakiService.Message m, System.AsyncCallback callback, object asyncState);
        
        void EndAddAction(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/AddActions", ReplyAction="http://tempuri.org/IService/AddActionsResponse")]
        System.IAsyncResult BeginAddActions(TakiApp.TakiService.MessageList ml, System.AsyncCallback callback, object asyncState);
        
        void EndAddActions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/DoAction", ReplyAction="http://tempuri.org/IService/DoActionResponse")]
        System.IAsyncResult BeginDoAction(int gameId, int playerId, System.AsyncCallback callback, object asyncState);
        
        TakiApp.TakiService.MessageList EndDoAction(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        System.IAsyncResult BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState);
        
        TakiApp.TakiService.User EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/Logout", ReplyAction="http://tempuri.org/IService/LogoutResponse")]
        System.IAsyncResult BeginLogout(int userId, System.AsyncCallback callback, object asyncState);
        
        bool EndLogout(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/Register", ReplyAction="http://tempuri.org/IService/RegisterResponse")]
        System.IAsyncResult BeginRegister(string firstName, string lastName, string username, string password, System.AsyncCallback callback, object asyncState);
        
        bool EndRegister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/DeleteUser", ReplyAction="http://tempuri.org/IService/DeleteUserResponse")]
        System.IAsyncResult BeginDeleteUser(TakiApp.TakiService.User user, System.AsyncCallback callback, object asyncState);
        
        int EndDeleteUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/UpdateUser", ReplyAction="http://tempuri.org/IService/UpdateUserResponse")]
        System.IAsyncResult BeginUpdateUser(TakiApp.TakiService.User user, System.AsyncCallback callback, object asyncState);
        
        int EndUpdateUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/PasswordAvailable", ReplyAction="http://tempuri.org/IService/PasswordAvailableResponse")]
        System.IAsyncResult BeginPasswordAvailable(string password, System.AsyncCallback callback, object asyncState);
        
        bool EndPasswordAvailable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetAllUserGames", ReplyAction="http://tempuri.org/IService/GetAllUserGamesResponse")]
        System.IAsyncResult BeginGetAllUserGames(int userId, System.AsyncCallback callback, object asyncState);
        
        TakiApp.TakiService.GameList EndGetAllUserGames(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetUserByUsername", ReplyAction="http://tempuri.org/IService/GetUserByUsernameResponse")]
        System.IAsyncResult BeginGetUserByUsername(string username, System.AsyncCallback callback, object asyncState);
        
        TakiApp.TakiService.User EndGetUserByUsername(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetUserById", ReplyAction="http://tempuri.org/IService/GetUserByIdResponse")]
        System.IAsyncResult BeginGetUserById(int id, System.AsyncCallback callback, object asyncState);
        
        TakiApp.TakiService.User EndGetUserById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/UsernameAvailable", ReplyAction="http://tempuri.org/IService/UsernameAvailableResponse")]
        System.IAsyncResult BeginUsernameAvailable(string username, System.AsyncCallback callback, object asyncState);
        
        bool EndUsernameAvailable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetAllUserFriends", ReplyAction="http://tempuri.org/IService/GetAllUserFriendsResponse")]
        System.IAsyncResult BeginGetAllUserFriends(int userId, System.AsyncCallback callback, object asyncState);
        
        TakiApp.TakiService.UserList EndGetAllUserFriends(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetMutualGames", ReplyAction="http://tempuri.org/IService/GetMutualGamesResponse")]
        System.IAsyncResult BeginGetMutualGames(int u1, int u2, System.AsyncCallback callback, object asyncState);
        
        TakiApp.TakiService.GameList EndGetMutualGames(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/AreFriends", ReplyAction="http://tempuri.org/IService/AreFriendsResponse")]
        System.IAsyncResult BeginAreFriends(int user1Id, int user2Id, System.AsyncCallback callback, object asyncState);
        
        bool EndAreFriends(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/MakeFriends", ReplyAction="http://tempuri.org/IService/MakeFriendsResponse")]
        System.IAsyncResult BeginMakeFriends(TakiApp.TakiService.User u1, TakiApp.TakiService.User u2, System.AsyncCallback callback, object asyncState);
        
        void EndMakeFriends(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/RemoveFriend", ReplyAction="http://tempuri.org/IService/RemoveFriendResponse")]
        System.IAsyncResult BeginRemoveFriend(TakiApp.TakiService.User u1, TakiApp.TakiService.User u2, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveFriend(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/StopSearchingForGame", ReplyAction="http://tempuri.org/IService/StopSearchingForGameResponse")]
        System.IAsyncResult BeginStopSearchingForGame(TakiApp.TakiService.Player p, System.AsyncCallback callback, object asyncState);
        
        bool EndStopSearchingForGame(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetPlayersFound", ReplyAction="http://tempuri.org/IService/GetPlayersFoundResponse")]
        System.IAsyncResult BeginGetPlayersFound(int playerCount, System.AsyncCallback callback, object asyncState);
        
        int EndGetPlayersFound(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/PlayerQuit", ReplyAction="http://tempuri.org/IService/PlayerQuitResponse")]
        System.IAsyncResult BeginPlayerQuit(TakiApp.TakiService.Player p, System.AsyncCallback callback, object asyncState);
        
        bool EndPlayerQuit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetAllUsers", ReplyAction="http://tempuri.org/IService/GetAllUsersResponse")]
        System.IAsyncResult BeginGetAllUsers(System.AsyncCallback callback, object asyncState);
        
        TakiApp.TakiService.UserList EndGetAllUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/SaveChanges", ReplyAction="http://tempuri.org/IService/SaveChangesResponse")]
        System.IAsyncResult BeginSaveChanges(System.AsyncCallback callback, object asyncState);
        
        int EndSaveChanges(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : TakiApp.TakiService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCardListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCardListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TakiApp.TakiService.CardList Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TakiApp.TakiService.CardList)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BuildDeckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BuildDeckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TakiApp.TakiService.CardList Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TakiApp.TakiService.CardList)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StartGameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StartGameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TakiApp.TakiService.Game Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TakiApp.TakiService.Game)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPlayerListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPlayerListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TakiApp.TakiService.PlayerList Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TakiApp.TakiService.PlayerList)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DoActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DoActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TakiApp.TakiService.MessageList Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TakiApp.TakiService.MessageList)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TakiApp.TakiService.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TakiApp.TakiService.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LogoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LogoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PasswordAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PasswordAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllUserGamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllUserGamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TakiApp.TakiService.GameList Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TakiApp.TakiService.GameList)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserByUsernameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserByUsernameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TakiApp.TakiService.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TakiApp.TakiService.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TakiApp.TakiService.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TakiApp.TakiService.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UsernameAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UsernameAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllUserFriendsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllUserFriendsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TakiApp.TakiService.UserList Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TakiApp.TakiService.UserList)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMutualGamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMutualGamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TakiApp.TakiService.GameList Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TakiApp.TakiService.GameList)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AreFriendsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AreFriendsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StopSearchingForGameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StopSearchingForGameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPlayersFoundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPlayersFoundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerQuitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlayerQuitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TakiApp.TakiService.UserList Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TakiApp.TakiService.UserList)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveChangesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveChangesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<TakiApp.TakiService.IService>, TakiApp.TakiService.IService {
        
        private BeginOperationDelegate onBeginGetCardListDelegate;
        
        private EndOperationDelegate onEndGetCardListDelegate;
        
        private System.Threading.SendOrPostCallback onGetCardListCompletedDelegate;
        
        private BeginOperationDelegate onBeginBuildDeckDelegate;
        
        private EndOperationDelegate onEndBuildDeckDelegate;
        
        private System.Threading.SendOrPostCallback onBuildDeckCompletedDelegate;
        
        private BeginOperationDelegate onBeginStartGameDelegate;
        
        private EndOperationDelegate onEndStartGameDelegate;
        
        private System.Threading.SendOrPostCallback onStartGameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPlayerListDelegate;
        
        private EndOperationDelegate onEndGetPlayerListDelegate;
        
        private System.Threading.SendOrPostCallback onGetPlayerListCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddActionDelegate;
        
        private EndOperationDelegate onEndAddActionDelegate;
        
        private System.Threading.SendOrPostCallback onAddActionCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddActionsDelegate;
        
        private EndOperationDelegate onEndAddActionsDelegate;
        
        private System.Threading.SendOrPostCallback onAddActionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDoActionDelegate;
        
        private EndOperationDelegate onEndDoActionDelegate;
        
        private System.Threading.SendOrPostCallback onDoActionCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogoutDelegate;
        
        private EndOperationDelegate onEndLogoutDelegate;
        
        private System.Threading.SendOrPostCallback onLogoutCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterDelegate;
        
        private EndOperationDelegate onEndRegisterDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteUserDelegate;
        
        private EndOperationDelegate onEndDeleteUserDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUserDelegate;
        
        private EndOperationDelegate onEndUpdateUserDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginPasswordAvailableDelegate;
        
        private EndOperationDelegate onEndPasswordAvailableDelegate;
        
        private System.Threading.SendOrPostCallback onPasswordAvailableCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllUserGamesDelegate;
        
        private EndOperationDelegate onEndGetAllUserGamesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllUserGamesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserByUsernameDelegate;
        
        private EndOperationDelegate onEndGetUserByUsernameDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserByUsernameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserByIdDelegate;
        
        private EndOperationDelegate onEndGetUserByIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginUsernameAvailableDelegate;
        
        private EndOperationDelegate onEndUsernameAvailableDelegate;
        
        private System.Threading.SendOrPostCallback onUsernameAvailableCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllUserFriendsDelegate;
        
        private EndOperationDelegate onEndGetAllUserFriendsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllUserFriendsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMutualGamesDelegate;
        
        private EndOperationDelegate onEndGetMutualGamesDelegate;
        
        private System.Threading.SendOrPostCallback onGetMutualGamesCompletedDelegate;
        
        private BeginOperationDelegate onBeginAreFriendsDelegate;
        
        private EndOperationDelegate onEndAreFriendsDelegate;
        
        private System.Threading.SendOrPostCallback onAreFriendsCompletedDelegate;
        
        private BeginOperationDelegate onBeginMakeFriendsDelegate;
        
        private EndOperationDelegate onEndMakeFriendsDelegate;
        
        private System.Threading.SendOrPostCallback onMakeFriendsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveFriendDelegate;
        
        private EndOperationDelegate onEndRemoveFriendDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveFriendCompletedDelegate;
        
        private BeginOperationDelegate onBeginStopSearchingForGameDelegate;
        
        private EndOperationDelegate onEndStopSearchingForGameDelegate;
        
        private System.Threading.SendOrPostCallback onStopSearchingForGameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPlayersFoundDelegate;
        
        private EndOperationDelegate onEndGetPlayersFoundDelegate;
        
        private System.Threading.SendOrPostCallback onGetPlayersFoundCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlayerQuitDelegate;
        
        private EndOperationDelegate onEndPlayerQuitDelegate;
        
        private System.Threading.SendOrPostCallback onPlayerQuitCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllUsersDelegate;
        
        private EndOperationDelegate onEndGetAllUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveChangesDelegate;
        
        private EndOperationDelegate onEndSaveChangesDelegate;
        
        private System.Threading.SendOrPostCallback onSaveChangesCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ServiceClient() : 
                base(ServiceClient.GetDefaultBinding(), ServiceClient.GetDefaultEndpointAddress()) {
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), ServiceClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetCardListCompletedEventArgs> GetCardListCompleted;
        
        public event System.EventHandler<BuildDeckCompletedEventArgs> BuildDeckCompleted;
        
        public event System.EventHandler<StartGameCompletedEventArgs> StartGameCompleted;
        
        public event System.EventHandler<GetPlayerListCompletedEventArgs> GetPlayerListCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddActionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddActionsCompleted;
        
        public event System.EventHandler<DoActionCompletedEventArgs> DoActionCompleted;
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<LogoutCompletedEventArgs> LogoutCompleted;
        
        public event System.EventHandler<RegisterCompletedEventArgs> RegisterCompleted;
        
        public event System.EventHandler<DeleteUserCompletedEventArgs> DeleteUserCompleted;
        
        public event System.EventHandler<UpdateUserCompletedEventArgs> UpdateUserCompleted;
        
        public event System.EventHandler<PasswordAvailableCompletedEventArgs> PasswordAvailableCompleted;
        
        public event System.EventHandler<GetAllUserGamesCompletedEventArgs> GetAllUserGamesCompleted;
        
        public event System.EventHandler<GetUserByUsernameCompletedEventArgs> GetUserByUsernameCompleted;
        
        public event System.EventHandler<GetUserByIdCompletedEventArgs> GetUserByIdCompleted;
        
        public event System.EventHandler<UsernameAvailableCompletedEventArgs> UsernameAvailableCompleted;
        
        public event System.EventHandler<GetAllUserFriendsCompletedEventArgs> GetAllUserFriendsCompleted;
        
        public event System.EventHandler<GetMutualGamesCompletedEventArgs> GetMutualGamesCompleted;
        
        public event System.EventHandler<AreFriendsCompletedEventArgs> AreFriendsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> MakeFriendsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveFriendCompleted;
        
        public event System.EventHandler<StopSearchingForGameCompletedEventArgs> StopSearchingForGameCompleted;
        
        public event System.EventHandler<GetPlayersFoundCompletedEventArgs> GetPlayersFoundCompleted;
        
        public event System.EventHandler<PlayerQuitCompletedEventArgs> PlayerQuitCompleted;
        
        public event System.EventHandler<GetAllUsersCompletedEventArgs> GetAllUsersCompleted;
        
        public event System.EventHandler<SaveChangesCompletedEventArgs> SaveChangesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginGetCardList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCardList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TakiApp.TakiService.CardList TakiApp.TakiService.IService.EndGetCardList(System.IAsyncResult result) {
            return base.Channel.EndGetCardList(result);
        }
        
        private System.IAsyncResult OnBeginGetCardList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((TakiApp.TakiService.IService)(this)).BeginGetCardList(callback, asyncState);
        }
        
        private object[] OnEndGetCardList(System.IAsyncResult result) {
            TakiApp.TakiService.CardList retVal = ((TakiApp.TakiService.IService)(this)).EndGetCardList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCardListCompleted(object state) {
            if ((this.GetCardListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCardListCompleted(this, new GetCardListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCardListAsync() {
            this.GetCardListAsync(null);
        }
        
        public void GetCardListAsync(object userState) {
            if ((this.onBeginGetCardListDelegate == null)) {
                this.onBeginGetCardListDelegate = new BeginOperationDelegate(this.OnBeginGetCardList);
            }
            if ((this.onEndGetCardListDelegate == null)) {
                this.onEndGetCardListDelegate = new EndOperationDelegate(this.OnEndGetCardList);
            }
            if ((this.onGetCardListCompletedDelegate == null)) {
                this.onGetCardListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCardListCompleted);
            }
            base.InvokeAsync(this.onBeginGetCardListDelegate, null, this.onEndGetCardListDelegate, this.onGetCardListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginBuildDeck(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBuildDeck(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TakiApp.TakiService.CardList TakiApp.TakiService.IService.EndBuildDeck(System.IAsyncResult result) {
            return base.Channel.EndBuildDeck(result);
        }
        
        private System.IAsyncResult OnBeginBuildDeck(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((TakiApp.TakiService.IService)(this)).BeginBuildDeck(callback, asyncState);
        }
        
        private object[] OnEndBuildDeck(System.IAsyncResult result) {
            TakiApp.TakiService.CardList retVal = ((TakiApp.TakiService.IService)(this)).EndBuildDeck(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBuildDeckCompleted(object state) {
            if ((this.BuildDeckCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BuildDeckCompleted(this, new BuildDeckCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BuildDeckAsync() {
            this.BuildDeckAsync(null);
        }
        
        public void BuildDeckAsync(object userState) {
            if ((this.onBeginBuildDeckDelegate == null)) {
                this.onBeginBuildDeckDelegate = new BeginOperationDelegate(this.OnBeginBuildDeck);
            }
            if ((this.onEndBuildDeckDelegate == null)) {
                this.onEndBuildDeckDelegate = new EndOperationDelegate(this.OnEndBuildDeck);
            }
            if ((this.onBuildDeckCompletedDelegate == null)) {
                this.onBuildDeckCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBuildDeckCompleted);
            }
            base.InvokeAsync(this.onBeginBuildDeckDelegate, null, this.onEndBuildDeckDelegate, this.onBuildDeckCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginStartGame(TakiApp.TakiService.Player p, int playerCount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStartGame(p, playerCount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TakiApp.TakiService.Game TakiApp.TakiService.IService.EndStartGame(System.IAsyncResult result) {
            return base.Channel.EndStartGame(result);
        }
        
        private System.IAsyncResult OnBeginStartGame(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TakiApp.TakiService.Player p = ((TakiApp.TakiService.Player)(inValues[0]));
            int playerCount = ((int)(inValues[1]));
            return ((TakiApp.TakiService.IService)(this)).BeginStartGame(p, playerCount, callback, asyncState);
        }
        
        private object[] OnEndStartGame(System.IAsyncResult result) {
            TakiApp.TakiService.Game retVal = ((TakiApp.TakiService.IService)(this)).EndStartGame(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStartGameCompleted(object state) {
            if ((this.StartGameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartGameCompleted(this, new StartGameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartGameAsync(TakiApp.TakiService.Player p, int playerCount) {
            this.StartGameAsync(p, playerCount, null);
        }
        
        public void StartGameAsync(TakiApp.TakiService.Player p, int playerCount, object userState) {
            if ((this.onBeginStartGameDelegate == null)) {
                this.onBeginStartGameDelegate = new BeginOperationDelegate(this.OnBeginStartGame);
            }
            if ((this.onEndStartGameDelegate == null)) {
                this.onEndStartGameDelegate = new EndOperationDelegate(this.OnEndStartGame);
            }
            if ((this.onStartGameCompletedDelegate == null)) {
                this.onStartGameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartGameCompleted);
            }
            base.InvokeAsync(this.onBeginStartGameDelegate, new object[] {
                        p,
                        playerCount}, this.onEndStartGameDelegate, this.onStartGameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginGetPlayerList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPlayerList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TakiApp.TakiService.PlayerList TakiApp.TakiService.IService.EndGetPlayerList(System.IAsyncResult result) {
            return base.Channel.EndGetPlayerList(result);
        }
        
        private System.IAsyncResult OnBeginGetPlayerList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((TakiApp.TakiService.IService)(this)).BeginGetPlayerList(callback, asyncState);
        }
        
        private object[] OnEndGetPlayerList(System.IAsyncResult result) {
            TakiApp.TakiService.PlayerList retVal = ((TakiApp.TakiService.IService)(this)).EndGetPlayerList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPlayerListCompleted(object state) {
            if ((this.GetPlayerListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPlayerListCompleted(this, new GetPlayerListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPlayerListAsync() {
            this.GetPlayerListAsync(null);
        }
        
        public void GetPlayerListAsync(object userState) {
            if ((this.onBeginGetPlayerListDelegate == null)) {
                this.onBeginGetPlayerListDelegate = new BeginOperationDelegate(this.OnBeginGetPlayerList);
            }
            if ((this.onEndGetPlayerListDelegate == null)) {
                this.onEndGetPlayerListDelegate = new EndOperationDelegate(this.OnEndGetPlayerList);
            }
            if ((this.onGetPlayerListCompletedDelegate == null)) {
                this.onGetPlayerListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPlayerListCompleted);
            }
            base.InvokeAsync(this.onBeginGetPlayerListDelegate, null, this.onEndGetPlayerListDelegate, this.onGetPlayerListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginAddAction(TakiApp.TakiService.Message m, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddAction(m, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TakiApp.TakiService.IService.EndAddAction(System.IAsyncResult result) {
            base.Channel.EndAddAction(result);
        }
        
        private System.IAsyncResult OnBeginAddAction(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TakiApp.TakiService.Message m = ((TakiApp.TakiService.Message)(inValues[0]));
            return ((TakiApp.TakiService.IService)(this)).BeginAddAction(m, callback, asyncState);
        }
        
        private object[] OnEndAddAction(System.IAsyncResult result) {
            ((TakiApp.TakiService.IService)(this)).EndAddAction(result);
            return null;
        }
        
        private void OnAddActionCompleted(object state) {
            if ((this.AddActionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddActionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddActionAsync(TakiApp.TakiService.Message m) {
            this.AddActionAsync(m, null);
        }
        
        public void AddActionAsync(TakiApp.TakiService.Message m, object userState) {
            if ((this.onBeginAddActionDelegate == null)) {
                this.onBeginAddActionDelegate = new BeginOperationDelegate(this.OnBeginAddAction);
            }
            if ((this.onEndAddActionDelegate == null)) {
                this.onEndAddActionDelegate = new EndOperationDelegate(this.OnEndAddAction);
            }
            if ((this.onAddActionCompletedDelegate == null)) {
                this.onAddActionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddActionCompleted);
            }
            base.InvokeAsync(this.onBeginAddActionDelegate, new object[] {
                        m}, this.onEndAddActionDelegate, this.onAddActionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginAddActions(TakiApp.TakiService.MessageList ml, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddActions(ml, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TakiApp.TakiService.IService.EndAddActions(System.IAsyncResult result) {
            base.Channel.EndAddActions(result);
        }
        
        private System.IAsyncResult OnBeginAddActions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TakiApp.TakiService.MessageList ml = ((TakiApp.TakiService.MessageList)(inValues[0]));
            return ((TakiApp.TakiService.IService)(this)).BeginAddActions(ml, callback, asyncState);
        }
        
        private object[] OnEndAddActions(System.IAsyncResult result) {
            ((TakiApp.TakiService.IService)(this)).EndAddActions(result);
            return null;
        }
        
        private void OnAddActionsCompleted(object state) {
            if ((this.AddActionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddActionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddActionsAsync(TakiApp.TakiService.MessageList ml) {
            this.AddActionsAsync(ml, null);
        }
        
        public void AddActionsAsync(TakiApp.TakiService.MessageList ml, object userState) {
            if ((this.onBeginAddActionsDelegate == null)) {
                this.onBeginAddActionsDelegate = new BeginOperationDelegate(this.OnBeginAddActions);
            }
            if ((this.onEndAddActionsDelegate == null)) {
                this.onEndAddActionsDelegate = new EndOperationDelegate(this.OnEndAddActions);
            }
            if ((this.onAddActionsCompletedDelegate == null)) {
                this.onAddActionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddActionsCompleted);
            }
            base.InvokeAsync(this.onBeginAddActionsDelegate, new object[] {
                        ml}, this.onEndAddActionsDelegate, this.onAddActionsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginDoAction(int gameId, int playerId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoAction(gameId, playerId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TakiApp.TakiService.MessageList TakiApp.TakiService.IService.EndDoAction(System.IAsyncResult result) {
            return base.Channel.EndDoAction(result);
        }
        
        private System.IAsyncResult OnBeginDoAction(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int gameId = ((int)(inValues[0]));
            int playerId = ((int)(inValues[1]));
            return ((TakiApp.TakiService.IService)(this)).BeginDoAction(gameId, playerId, callback, asyncState);
        }
        
        private object[] OnEndDoAction(System.IAsyncResult result) {
            TakiApp.TakiService.MessageList retVal = ((TakiApp.TakiService.IService)(this)).EndDoAction(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDoActionCompleted(object state) {
            if ((this.DoActionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoActionCompleted(this, new DoActionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoActionAsync(int gameId, int playerId) {
            this.DoActionAsync(gameId, playerId, null);
        }
        
        public void DoActionAsync(int gameId, int playerId, object userState) {
            if ((this.onBeginDoActionDelegate == null)) {
                this.onBeginDoActionDelegate = new BeginOperationDelegate(this.OnBeginDoAction);
            }
            if ((this.onEndDoActionDelegate == null)) {
                this.onEndDoActionDelegate = new EndOperationDelegate(this.OnEndDoAction);
            }
            if ((this.onDoActionCompletedDelegate == null)) {
                this.onDoActionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoActionCompleted);
            }
            base.InvokeAsync(this.onBeginDoActionDelegate, new object[] {
                        gameId,
                        playerId}, this.onEndDoActionDelegate, this.onDoActionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TakiApp.TakiService.User TakiApp.TakiService.IService.EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((TakiApp.TakiService.IService)(this)).BeginLogin(username, password, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            TakiApp.TakiService.User retVal = ((TakiApp.TakiService.IService)(this)).EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string username, string password) {
            this.LoginAsync(username, password, null);
        }
        
        public void LoginAsync(string username, string password, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        username,
                        password}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginLogout(int userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogout(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool TakiApp.TakiService.IService.EndLogout(System.IAsyncResult result) {
            return base.Channel.EndLogout(result);
        }
        
        private System.IAsyncResult OnBeginLogout(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userId = ((int)(inValues[0]));
            return ((TakiApp.TakiService.IService)(this)).BeginLogout(userId, callback, asyncState);
        }
        
        private object[] OnEndLogout(System.IAsyncResult result) {
            bool retVal = ((TakiApp.TakiService.IService)(this)).EndLogout(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLogoutCompleted(object state) {
            if ((this.LogoutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogoutCompleted(this, new LogoutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogoutAsync(int userId) {
            this.LogoutAsync(userId, null);
        }
        
        public void LogoutAsync(int userId, object userState) {
            if ((this.onBeginLogoutDelegate == null)) {
                this.onBeginLogoutDelegate = new BeginOperationDelegate(this.OnBeginLogout);
            }
            if ((this.onEndLogoutDelegate == null)) {
                this.onEndLogoutDelegate = new EndOperationDelegate(this.OnEndLogout);
            }
            if ((this.onLogoutCompletedDelegate == null)) {
                this.onLogoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogoutCompleted);
            }
            base.InvokeAsync(this.onBeginLogoutDelegate, new object[] {
                        userId}, this.onEndLogoutDelegate, this.onLogoutCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginRegister(string firstName, string lastName, string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegister(firstName, lastName, username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool TakiApp.TakiService.IService.EndRegister(System.IAsyncResult result) {
            return base.Channel.EndRegister(result);
        }
        
        private System.IAsyncResult OnBeginRegister(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string firstName = ((string)(inValues[0]));
            string lastName = ((string)(inValues[1]));
            string username = ((string)(inValues[2]));
            string password = ((string)(inValues[3]));
            return ((TakiApp.TakiService.IService)(this)).BeginRegister(firstName, lastName, username, password, callback, asyncState);
        }
        
        private object[] OnEndRegister(System.IAsyncResult result) {
            bool retVal = ((TakiApp.TakiService.IService)(this)).EndRegister(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterCompleted(object state) {
            if ((this.RegisterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterCompleted(this, new RegisterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterAsync(string firstName, string lastName, string username, string password) {
            this.RegisterAsync(firstName, lastName, username, password, null);
        }
        
        public void RegisterAsync(string firstName, string lastName, string username, string password, object userState) {
            if ((this.onBeginRegisterDelegate == null)) {
                this.onBeginRegisterDelegate = new BeginOperationDelegate(this.OnBeginRegister);
            }
            if ((this.onEndRegisterDelegate == null)) {
                this.onEndRegisterDelegate = new EndOperationDelegate(this.OnEndRegister);
            }
            if ((this.onRegisterCompletedDelegate == null)) {
                this.onRegisterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterDelegate, new object[] {
                        firstName,
                        lastName,
                        username,
                        password}, this.onEndRegisterDelegate, this.onRegisterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginDeleteUser(TakiApp.TakiService.User user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteUser(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int TakiApp.TakiService.IService.EndDeleteUser(System.IAsyncResult result) {
            return base.Channel.EndDeleteUser(result);
        }
        
        private System.IAsyncResult OnBeginDeleteUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TakiApp.TakiService.User user = ((TakiApp.TakiService.User)(inValues[0]));
            return ((TakiApp.TakiService.IService)(this)).BeginDeleteUser(user, callback, asyncState);
        }
        
        private object[] OnEndDeleteUser(System.IAsyncResult result) {
            int retVal = ((TakiApp.TakiService.IService)(this)).EndDeleteUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteUserCompleted(object state) {
            if ((this.DeleteUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteUserCompleted(this, new DeleteUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteUserAsync(TakiApp.TakiService.User user) {
            this.DeleteUserAsync(user, null);
        }
        
        public void DeleteUserAsync(TakiApp.TakiService.User user, object userState) {
            if ((this.onBeginDeleteUserDelegate == null)) {
                this.onBeginDeleteUserDelegate = new BeginOperationDelegate(this.OnBeginDeleteUser);
            }
            if ((this.onEndDeleteUserDelegate == null)) {
                this.onEndDeleteUserDelegate = new EndOperationDelegate(this.OnEndDeleteUser);
            }
            if ((this.onDeleteUserCompletedDelegate == null)) {
                this.onDeleteUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteUserCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteUserDelegate, new object[] {
                        user}, this.onEndDeleteUserDelegate, this.onDeleteUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginUpdateUser(TakiApp.TakiService.User user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUser(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int TakiApp.TakiService.IService.EndUpdateUser(System.IAsyncResult result) {
            return base.Channel.EndUpdateUser(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TakiApp.TakiService.User user = ((TakiApp.TakiService.User)(inValues[0]));
            return ((TakiApp.TakiService.IService)(this)).BeginUpdateUser(user, callback, asyncState);
        }
        
        private object[] OnEndUpdateUser(System.IAsyncResult result) {
            int retVal = ((TakiApp.TakiService.IService)(this)).EndUpdateUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateUserCompleted(object state) {
            if ((this.UpdateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUserCompleted(this, new UpdateUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUserAsync(TakiApp.TakiService.User user) {
            this.UpdateUserAsync(user, null);
        }
        
        public void UpdateUserAsync(TakiApp.TakiService.User user, object userState) {
            if ((this.onBeginUpdateUserDelegate == null)) {
                this.onBeginUpdateUserDelegate = new BeginOperationDelegate(this.OnBeginUpdateUser);
            }
            if ((this.onEndUpdateUserDelegate == null)) {
                this.onEndUpdateUserDelegate = new EndOperationDelegate(this.OnEndUpdateUser);
            }
            if ((this.onUpdateUserCompletedDelegate == null)) {
                this.onUpdateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUserCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUserDelegate, new object[] {
                        user}, this.onEndUpdateUserDelegate, this.onUpdateUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginPasswordAvailable(string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPasswordAvailable(password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool TakiApp.TakiService.IService.EndPasswordAvailable(System.IAsyncResult result) {
            return base.Channel.EndPasswordAvailable(result);
        }
        
        private System.IAsyncResult OnBeginPasswordAvailable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string password = ((string)(inValues[0]));
            return ((TakiApp.TakiService.IService)(this)).BeginPasswordAvailable(password, callback, asyncState);
        }
        
        private object[] OnEndPasswordAvailable(System.IAsyncResult result) {
            bool retVal = ((TakiApp.TakiService.IService)(this)).EndPasswordAvailable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPasswordAvailableCompleted(object state) {
            if ((this.PasswordAvailableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PasswordAvailableCompleted(this, new PasswordAvailableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PasswordAvailableAsync(string password) {
            this.PasswordAvailableAsync(password, null);
        }
        
        public void PasswordAvailableAsync(string password, object userState) {
            if ((this.onBeginPasswordAvailableDelegate == null)) {
                this.onBeginPasswordAvailableDelegate = new BeginOperationDelegate(this.OnBeginPasswordAvailable);
            }
            if ((this.onEndPasswordAvailableDelegate == null)) {
                this.onEndPasswordAvailableDelegate = new EndOperationDelegate(this.OnEndPasswordAvailable);
            }
            if ((this.onPasswordAvailableCompletedDelegate == null)) {
                this.onPasswordAvailableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPasswordAvailableCompleted);
            }
            base.InvokeAsync(this.onBeginPasswordAvailableDelegate, new object[] {
                        password}, this.onEndPasswordAvailableDelegate, this.onPasswordAvailableCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginGetAllUserGames(int userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllUserGames(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TakiApp.TakiService.GameList TakiApp.TakiService.IService.EndGetAllUserGames(System.IAsyncResult result) {
            return base.Channel.EndGetAllUserGames(result);
        }
        
        private System.IAsyncResult OnBeginGetAllUserGames(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userId = ((int)(inValues[0]));
            return ((TakiApp.TakiService.IService)(this)).BeginGetAllUserGames(userId, callback, asyncState);
        }
        
        private object[] OnEndGetAllUserGames(System.IAsyncResult result) {
            TakiApp.TakiService.GameList retVal = ((TakiApp.TakiService.IService)(this)).EndGetAllUserGames(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllUserGamesCompleted(object state) {
            if ((this.GetAllUserGamesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllUserGamesCompleted(this, new GetAllUserGamesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllUserGamesAsync(int userId) {
            this.GetAllUserGamesAsync(userId, null);
        }
        
        public void GetAllUserGamesAsync(int userId, object userState) {
            if ((this.onBeginGetAllUserGamesDelegate == null)) {
                this.onBeginGetAllUserGamesDelegate = new BeginOperationDelegate(this.OnBeginGetAllUserGames);
            }
            if ((this.onEndGetAllUserGamesDelegate == null)) {
                this.onEndGetAllUserGamesDelegate = new EndOperationDelegate(this.OnEndGetAllUserGames);
            }
            if ((this.onGetAllUserGamesCompletedDelegate == null)) {
                this.onGetAllUserGamesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllUserGamesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllUserGamesDelegate, new object[] {
                        userId}, this.onEndGetAllUserGamesDelegate, this.onGetAllUserGamesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginGetUserByUsername(string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserByUsername(username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TakiApp.TakiService.User TakiApp.TakiService.IService.EndGetUserByUsername(System.IAsyncResult result) {
            return base.Channel.EndGetUserByUsername(result);
        }
        
        private System.IAsyncResult OnBeginGetUserByUsername(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            return ((TakiApp.TakiService.IService)(this)).BeginGetUserByUsername(username, callback, asyncState);
        }
        
        private object[] OnEndGetUserByUsername(System.IAsyncResult result) {
            TakiApp.TakiService.User retVal = ((TakiApp.TakiService.IService)(this)).EndGetUserByUsername(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserByUsernameCompleted(object state) {
            if ((this.GetUserByUsernameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserByUsernameCompleted(this, new GetUserByUsernameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserByUsernameAsync(string username) {
            this.GetUserByUsernameAsync(username, null);
        }
        
        public void GetUserByUsernameAsync(string username, object userState) {
            if ((this.onBeginGetUserByUsernameDelegate == null)) {
                this.onBeginGetUserByUsernameDelegate = new BeginOperationDelegate(this.OnBeginGetUserByUsername);
            }
            if ((this.onEndGetUserByUsernameDelegate == null)) {
                this.onEndGetUserByUsernameDelegate = new EndOperationDelegate(this.OnEndGetUserByUsername);
            }
            if ((this.onGetUserByUsernameCompletedDelegate == null)) {
                this.onGetUserByUsernameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserByUsernameCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserByUsernameDelegate, new object[] {
                        username}, this.onEndGetUserByUsernameDelegate, this.onGetUserByUsernameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginGetUserById(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserById(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TakiApp.TakiService.User TakiApp.TakiService.IService.EndGetUserById(System.IAsyncResult result) {
            return base.Channel.EndGetUserById(result);
        }
        
        private System.IAsyncResult OnBeginGetUserById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((TakiApp.TakiService.IService)(this)).BeginGetUserById(id, callback, asyncState);
        }
        
        private object[] OnEndGetUserById(System.IAsyncResult result) {
            TakiApp.TakiService.User retVal = ((TakiApp.TakiService.IService)(this)).EndGetUserById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserByIdCompleted(object state) {
            if ((this.GetUserByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserByIdCompleted(this, new GetUserByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserByIdAsync(int id) {
            this.GetUserByIdAsync(id, null);
        }
        
        public void GetUserByIdAsync(int id, object userState) {
            if ((this.onBeginGetUserByIdDelegate == null)) {
                this.onBeginGetUserByIdDelegate = new BeginOperationDelegate(this.OnBeginGetUserById);
            }
            if ((this.onEndGetUserByIdDelegate == null)) {
                this.onEndGetUserByIdDelegate = new EndOperationDelegate(this.OnEndGetUserById);
            }
            if ((this.onGetUserByIdCompletedDelegate == null)) {
                this.onGetUserByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserByIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserByIdDelegate, new object[] {
                        id}, this.onEndGetUserByIdDelegate, this.onGetUserByIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginUsernameAvailable(string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUsernameAvailable(username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool TakiApp.TakiService.IService.EndUsernameAvailable(System.IAsyncResult result) {
            return base.Channel.EndUsernameAvailable(result);
        }
        
        private System.IAsyncResult OnBeginUsernameAvailable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            return ((TakiApp.TakiService.IService)(this)).BeginUsernameAvailable(username, callback, asyncState);
        }
        
        private object[] OnEndUsernameAvailable(System.IAsyncResult result) {
            bool retVal = ((TakiApp.TakiService.IService)(this)).EndUsernameAvailable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUsernameAvailableCompleted(object state) {
            if ((this.UsernameAvailableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UsernameAvailableCompleted(this, new UsernameAvailableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UsernameAvailableAsync(string username) {
            this.UsernameAvailableAsync(username, null);
        }
        
        public void UsernameAvailableAsync(string username, object userState) {
            if ((this.onBeginUsernameAvailableDelegate == null)) {
                this.onBeginUsernameAvailableDelegate = new BeginOperationDelegate(this.OnBeginUsernameAvailable);
            }
            if ((this.onEndUsernameAvailableDelegate == null)) {
                this.onEndUsernameAvailableDelegate = new EndOperationDelegate(this.OnEndUsernameAvailable);
            }
            if ((this.onUsernameAvailableCompletedDelegate == null)) {
                this.onUsernameAvailableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUsernameAvailableCompleted);
            }
            base.InvokeAsync(this.onBeginUsernameAvailableDelegate, new object[] {
                        username}, this.onEndUsernameAvailableDelegate, this.onUsernameAvailableCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginGetAllUserFriends(int userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllUserFriends(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TakiApp.TakiService.UserList TakiApp.TakiService.IService.EndGetAllUserFriends(System.IAsyncResult result) {
            return base.Channel.EndGetAllUserFriends(result);
        }
        
        private System.IAsyncResult OnBeginGetAllUserFriends(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userId = ((int)(inValues[0]));
            return ((TakiApp.TakiService.IService)(this)).BeginGetAllUserFriends(userId, callback, asyncState);
        }
        
        private object[] OnEndGetAllUserFriends(System.IAsyncResult result) {
            TakiApp.TakiService.UserList retVal = ((TakiApp.TakiService.IService)(this)).EndGetAllUserFriends(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllUserFriendsCompleted(object state) {
            if ((this.GetAllUserFriendsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllUserFriendsCompleted(this, new GetAllUserFriendsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllUserFriendsAsync(int userId) {
            this.GetAllUserFriendsAsync(userId, null);
        }
        
        public void GetAllUserFriendsAsync(int userId, object userState) {
            if ((this.onBeginGetAllUserFriendsDelegate == null)) {
                this.onBeginGetAllUserFriendsDelegate = new BeginOperationDelegate(this.OnBeginGetAllUserFriends);
            }
            if ((this.onEndGetAllUserFriendsDelegate == null)) {
                this.onEndGetAllUserFriendsDelegate = new EndOperationDelegate(this.OnEndGetAllUserFriends);
            }
            if ((this.onGetAllUserFriendsCompletedDelegate == null)) {
                this.onGetAllUserFriendsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllUserFriendsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllUserFriendsDelegate, new object[] {
                        userId}, this.onEndGetAllUserFriendsDelegate, this.onGetAllUserFriendsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginGetMutualGames(int u1, int u2, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMutualGames(u1, u2, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TakiApp.TakiService.GameList TakiApp.TakiService.IService.EndGetMutualGames(System.IAsyncResult result) {
            return base.Channel.EndGetMutualGames(result);
        }
        
        private System.IAsyncResult OnBeginGetMutualGames(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int u1 = ((int)(inValues[0]));
            int u2 = ((int)(inValues[1]));
            return ((TakiApp.TakiService.IService)(this)).BeginGetMutualGames(u1, u2, callback, asyncState);
        }
        
        private object[] OnEndGetMutualGames(System.IAsyncResult result) {
            TakiApp.TakiService.GameList retVal = ((TakiApp.TakiService.IService)(this)).EndGetMutualGames(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMutualGamesCompleted(object state) {
            if ((this.GetMutualGamesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMutualGamesCompleted(this, new GetMutualGamesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMutualGamesAsync(int u1, int u2) {
            this.GetMutualGamesAsync(u1, u2, null);
        }
        
        public void GetMutualGamesAsync(int u1, int u2, object userState) {
            if ((this.onBeginGetMutualGamesDelegate == null)) {
                this.onBeginGetMutualGamesDelegate = new BeginOperationDelegate(this.OnBeginGetMutualGames);
            }
            if ((this.onEndGetMutualGamesDelegate == null)) {
                this.onEndGetMutualGamesDelegate = new EndOperationDelegate(this.OnEndGetMutualGames);
            }
            if ((this.onGetMutualGamesCompletedDelegate == null)) {
                this.onGetMutualGamesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMutualGamesCompleted);
            }
            base.InvokeAsync(this.onBeginGetMutualGamesDelegate, new object[] {
                        u1,
                        u2}, this.onEndGetMutualGamesDelegate, this.onGetMutualGamesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginAreFriends(int user1Id, int user2Id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAreFriends(user1Id, user2Id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool TakiApp.TakiService.IService.EndAreFriends(System.IAsyncResult result) {
            return base.Channel.EndAreFriends(result);
        }
        
        private System.IAsyncResult OnBeginAreFriends(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int user1Id = ((int)(inValues[0]));
            int user2Id = ((int)(inValues[1]));
            return ((TakiApp.TakiService.IService)(this)).BeginAreFriends(user1Id, user2Id, callback, asyncState);
        }
        
        private object[] OnEndAreFriends(System.IAsyncResult result) {
            bool retVal = ((TakiApp.TakiService.IService)(this)).EndAreFriends(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAreFriendsCompleted(object state) {
            if ((this.AreFriendsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AreFriendsCompleted(this, new AreFriendsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AreFriendsAsync(int user1Id, int user2Id) {
            this.AreFriendsAsync(user1Id, user2Id, null);
        }
        
        public void AreFriendsAsync(int user1Id, int user2Id, object userState) {
            if ((this.onBeginAreFriendsDelegate == null)) {
                this.onBeginAreFriendsDelegate = new BeginOperationDelegate(this.OnBeginAreFriends);
            }
            if ((this.onEndAreFriendsDelegate == null)) {
                this.onEndAreFriendsDelegate = new EndOperationDelegate(this.OnEndAreFriends);
            }
            if ((this.onAreFriendsCompletedDelegate == null)) {
                this.onAreFriendsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAreFriendsCompleted);
            }
            base.InvokeAsync(this.onBeginAreFriendsDelegate, new object[] {
                        user1Id,
                        user2Id}, this.onEndAreFriendsDelegate, this.onAreFriendsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginMakeFriends(TakiApp.TakiService.User u1, TakiApp.TakiService.User u2, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMakeFriends(u1, u2, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TakiApp.TakiService.IService.EndMakeFriends(System.IAsyncResult result) {
            base.Channel.EndMakeFriends(result);
        }
        
        private System.IAsyncResult OnBeginMakeFriends(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TakiApp.TakiService.User u1 = ((TakiApp.TakiService.User)(inValues[0]));
            TakiApp.TakiService.User u2 = ((TakiApp.TakiService.User)(inValues[1]));
            return ((TakiApp.TakiService.IService)(this)).BeginMakeFriends(u1, u2, callback, asyncState);
        }
        
        private object[] OnEndMakeFriends(System.IAsyncResult result) {
            ((TakiApp.TakiService.IService)(this)).EndMakeFriends(result);
            return null;
        }
        
        private void OnMakeFriendsCompleted(object state) {
            if ((this.MakeFriendsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MakeFriendsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MakeFriendsAsync(TakiApp.TakiService.User u1, TakiApp.TakiService.User u2) {
            this.MakeFriendsAsync(u1, u2, null);
        }
        
        public void MakeFriendsAsync(TakiApp.TakiService.User u1, TakiApp.TakiService.User u2, object userState) {
            if ((this.onBeginMakeFriendsDelegate == null)) {
                this.onBeginMakeFriendsDelegate = new BeginOperationDelegate(this.OnBeginMakeFriends);
            }
            if ((this.onEndMakeFriendsDelegate == null)) {
                this.onEndMakeFriendsDelegate = new EndOperationDelegate(this.OnEndMakeFriends);
            }
            if ((this.onMakeFriendsCompletedDelegate == null)) {
                this.onMakeFriendsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMakeFriendsCompleted);
            }
            base.InvokeAsync(this.onBeginMakeFriendsDelegate, new object[] {
                        u1,
                        u2}, this.onEndMakeFriendsDelegate, this.onMakeFriendsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginRemoveFriend(TakiApp.TakiService.User u1, TakiApp.TakiService.User u2, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveFriend(u1, u2, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TakiApp.TakiService.IService.EndRemoveFriend(System.IAsyncResult result) {
            base.Channel.EndRemoveFriend(result);
        }
        
        private System.IAsyncResult OnBeginRemoveFriend(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TakiApp.TakiService.User u1 = ((TakiApp.TakiService.User)(inValues[0]));
            TakiApp.TakiService.User u2 = ((TakiApp.TakiService.User)(inValues[1]));
            return ((TakiApp.TakiService.IService)(this)).BeginRemoveFriend(u1, u2, callback, asyncState);
        }
        
        private object[] OnEndRemoveFriend(System.IAsyncResult result) {
            ((TakiApp.TakiService.IService)(this)).EndRemoveFriend(result);
            return null;
        }
        
        private void OnRemoveFriendCompleted(object state) {
            if ((this.RemoveFriendCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveFriendCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveFriendAsync(TakiApp.TakiService.User u1, TakiApp.TakiService.User u2) {
            this.RemoveFriendAsync(u1, u2, null);
        }
        
        public void RemoveFriendAsync(TakiApp.TakiService.User u1, TakiApp.TakiService.User u2, object userState) {
            if ((this.onBeginRemoveFriendDelegate == null)) {
                this.onBeginRemoveFriendDelegate = new BeginOperationDelegate(this.OnBeginRemoveFriend);
            }
            if ((this.onEndRemoveFriendDelegate == null)) {
                this.onEndRemoveFriendDelegate = new EndOperationDelegate(this.OnEndRemoveFriend);
            }
            if ((this.onRemoveFriendCompletedDelegate == null)) {
                this.onRemoveFriendCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveFriendCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveFriendDelegate, new object[] {
                        u1,
                        u2}, this.onEndRemoveFriendDelegate, this.onRemoveFriendCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginStopSearchingForGame(TakiApp.TakiService.Player p, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStopSearchingForGame(p, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool TakiApp.TakiService.IService.EndStopSearchingForGame(System.IAsyncResult result) {
            return base.Channel.EndStopSearchingForGame(result);
        }
        
        private System.IAsyncResult OnBeginStopSearchingForGame(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TakiApp.TakiService.Player p = ((TakiApp.TakiService.Player)(inValues[0]));
            return ((TakiApp.TakiService.IService)(this)).BeginStopSearchingForGame(p, callback, asyncState);
        }
        
        private object[] OnEndStopSearchingForGame(System.IAsyncResult result) {
            bool retVal = ((TakiApp.TakiService.IService)(this)).EndStopSearchingForGame(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStopSearchingForGameCompleted(object state) {
            if ((this.StopSearchingForGameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StopSearchingForGameCompleted(this, new StopSearchingForGameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StopSearchingForGameAsync(TakiApp.TakiService.Player p) {
            this.StopSearchingForGameAsync(p, null);
        }
        
        public void StopSearchingForGameAsync(TakiApp.TakiService.Player p, object userState) {
            if ((this.onBeginStopSearchingForGameDelegate == null)) {
                this.onBeginStopSearchingForGameDelegate = new BeginOperationDelegate(this.OnBeginStopSearchingForGame);
            }
            if ((this.onEndStopSearchingForGameDelegate == null)) {
                this.onEndStopSearchingForGameDelegate = new EndOperationDelegate(this.OnEndStopSearchingForGame);
            }
            if ((this.onStopSearchingForGameCompletedDelegate == null)) {
                this.onStopSearchingForGameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStopSearchingForGameCompleted);
            }
            base.InvokeAsync(this.onBeginStopSearchingForGameDelegate, new object[] {
                        p}, this.onEndStopSearchingForGameDelegate, this.onStopSearchingForGameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginGetPlayersFound(int playerCount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPlayersFound(playerCount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int TakiApp.TakiService.IService.EndGetPlayersFound(System.IAsyncResult result) {
            return base.Channel.EndGetPlayersFound(result);
        }
        
        private System.IAsyncResult OnBeginGetPlayersFound(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int playerCount = ((int)(inValues[0]));
            return ((TakiApp.TakiService.IService)(this)).BeginGetPlayersFound(playerCount, callback, asyncState);
        }
        
        private object[] OnEndGetPlayersFound(System.IAsyncResult result) {
            int retVal = ((TakiApp.TakiService.IService)(this)).EndGetPlayersFound(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPlayersFoundCompleted(object state) {
            if ((this.GetPlayersFoundCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPlayersFoundCompleted(this, new GetPlayersFoundCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPlayersFoundAsync(int playerCount) {
            this.GetPlayersFoundAsync(playerCount, null);
        }
        
        public void GetPlayersFoundAsync(int playerCount, object userState) {
            if ((this.onBeginGetPlayersFoundDelegate == null)) {
                this.onBeginGetPlayersFoundDelegate = new BeginOperationDelegate(this.OnBeginGetPlayersFound);
            }
            if ((this.onEndGetPlayersFoundDelegate == null)) {
                this.onEndGetPlayersFoundDelegate = new EndOperationDelegate(this.OnEndGetPlayersFound);
            }
            if ((this.onGetPlayersFoundCompletedDelegate == null)) {
                this.onGetPlayersFoundCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPlayersFoundCompleted);
            }
            base.InvokeAsync(this.onBeginGetPlayersFoundDelegate, new object[] {
                        playerCount}, this.onEndGetPlayersFoundDelegate, this.onGetPlayersFoundCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginPlayerQuit(TakiApp.TakiService.Player p, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlayerQuit(p, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool TakiApp.TakiService.IService.EndPlayerQuit(System.IAsyncResult result) {
            return base.Channel.EndPlayerQuit(result);
        }
        
        private System.IAsyncResult OnBeginPlayerQuit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TakiApp.TakiService.Player p = ((TakiApp.TakiService.Player)(inValues[0]));
            return ((TakiApp.TakiService.IService)(this)).BeginPlayerQuit(p, callback, asyncState);
        }
        
        private object[] OnEndPlayerQuit(System.IAsyncResult result) {
            bool retVal = ((TakiApp.TakiService.IService)(this)).EndPlayerQuit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlayerQuitCompleted(object state) {
            if ((this.PlayerQuitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlayerQuitCompleted(this, new PlayerQuitCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlayerQuitAsync(TakiApp.TakiService.Player p) {
            this.PlayerQuitAsync(p, null);
        }
        
        public void PlayerQuitAsync(TakiApp.TakiService.Player p, object userState) {
            if ((this.onBeginPlayerQuitDelegate == null)) {
                this.onBeginPlayerQuitDelegate = new BeginOperationDelegate(this.OnBeginPlayerQuit);
            }
            if ((this.onEndPlayerQuitDelegate == null)) {
                this.onEndPlayerQuitDelegate = new EndOperationDelegate(this.OnEndPlayerQuit);
            }
            if ((this.onPlayerQuitCompletedDelegate == null)) {
                this.onPlayerQuitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlayerQuitCompleted);
            }
            base.InvokeAsync(this.onBeginPlayerQuitDelegate, new object[] {
                        p}, this.onEndPlayerQuitDelegate, this.onPlayerQuitCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginGetAllUsers(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllUsers(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TakiApp.TakiService.UserList TakiApp.TakiService.IService.EndGetAllUsers(System.IAsyncResult result) {
            return base.Channel.EndGetAllUsers(result);
        }
        
        private System.IAsyncResult OnBeginGetAllUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((TakiApp.TakiService.IService)(this)).BeginGetAllUsers(callback, asyncState);
        }
        
        private object[] OnEndGetAllUsers(System.IAsyncResult result) {
            TakiApp.TakiService.UserList retVal = ((TakiApp.TakiService.IService)(this)).EndGetAllUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllUsersCompleted(object state) {
            if ((this.GetAllUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllUsersCompleted(this, new GetAllUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllUsersAsync() {
            this.GetAllUsersAsync(null);
        }
        
        public void GetAllUsersAsync(object userState) {
            if ((this.onBeginGetAllUsersDelegate == null)) {
                this.onBeginGetAllUsersDelegate = new BeginOperationDelegate(this.OnBeginGetAllUsers);
            }
            if ((this.onEndGetAllUsersDelegate == null)) {
                this.onEndGetAllUsersDelegate = new EndOperationDelegate(this.OnEndGetAllUsers);
            }
            if ((this.onGetAllUsersCompletedDelegate == null)) {
                this.onGetAllUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllUsersDelegate, null, this.onEndGetAllUsersDelegate, this.onGetAllUsersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TakiApp.TakiService.IService.BeginSaveChanges(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveChanges(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int TakiApp.TakiService.IService.EndSaveChanges(System.IAsyncResult result) {
            return base.Channel.EndSaveChanges(result);
        }
        
        private System.IAsyncResult OnBeginSaveChanges(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((TakiApp.TakiService.IService)(this)).BeginSaveChanges(callback, asyncState);
        }
        
        private object[] OnEndSaveChanges(System.IAsyncResult result) {
            int retVal = ((TakiApp.TakiService.IService)(this)).EndSaveChanges(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveChangesCompleted(object state) {
            if ((this.SaveChangesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveChangesCompleted(this, new SaveChangesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveChangesAsync() {
            this.SaveChangesAsync(null);
        }
        
        public void SaveChangesAsync(object userState) {
            if ((this.onBeginSaveChangesDelegate == null)) {
                this.onBeginSaveChangesDelegate = new BeginOperationDelegate(this.OnBeginSaveChanges);
            }
            if ((this.onEndSaveChangesDelegate == null)) {
                this.onEndSaveChangesDelegate = new EndOperationDelegate(this.OnEndSaveChanges);
            }
            if ((this.onSaveChangesCompletedDelegate == null)) {
                this.onSaveChangesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveChangesCompleted);
            }
            base.InvokeAsync(this.onBeginSaveChangesDelegate, null, this.onEndSaveChangesDelegate, this.onSaveChangesCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override TakiApp.TakiService.IService CreateChannel() {
            return new ServiceClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService)) {
                return new System.ServiceModel.EndpointAddress("http://192.168.0.18:8733/Design_Time_Addresses/Service/Service/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return ServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return ServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        private class ServiceClientChannel : ChannelBase<TakiApp.TakiService.IService>, TakiApp.TakiService.IService {
            
            public ServiceClientChannel(System.ServiceModel.ClientBase<TakiApp.TakiService.IService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetCardList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCardList", _args, callback, asyncState);
                return _result;
            }
            
            public TakiApp.TakiService.CardList EndGetCardList(System.IAsyncResult result) {
                object[] _args = new object[0];
                TakiApp.TakiService.CardList _result = ((TakiApp.TakiService.CardList)(base.EndInvoke("GetCardList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBuildDeck(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("BuildDeck", _args, callback, asyncState);
                return _result;
            }
            
            public TakiApp.TakiService.CardList EndBuildDeck(System.IAsyncResult result) {
                object[] _args = new object[0];
                TakiApp.TakiService.CardList _result = ((TakiApp.TakiService.CardList)(base.EndInvoke("BuildDeck", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginStartGame(TakiApp.TakiService.Player p, int playerCount, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = p;
                _args[1] = playerCount;
                System.IAsyncResult _result = base.BeginInvoke("StartGame", _args, callback, asyncState);
                return _result;
            }
            
            public TakiApp.TakiService.Game EndStartGame(System.IAsyncResult result) {
                object[] _args = new object[0];
                TakiApp.TakiService.Game _result = ((TakiApp.TakiService.Game)(base.EndInvoke("StartGame", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPlayerList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetPlayerList", _args, callback, asyncState);
                return _result;
            }
            
            public TakiApp.TakiService.PlayerList EndGetPlayerList(System.IAsyncResult result) {
                object[] _args = new object[0];
                TakiApp.TakiService.PlayerList _result = ((TakiApp.TakiService.PlayerList)(base.EndInvoke("GetPlayerList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddAction(TakiApp.TakiService.Message m, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = m;
                System.IAsyncResult _result = base.BeginInvoke("AddAction", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddAction(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddAction", _args, result);
            }
            
            public System.IAsyncResult BeginAddActions(TakiApp.TakiService.MessageList ml, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ml;
                System.IAsyncResult _result = base.BeginInvoke("AddActions", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddActions(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddActions", _args, result);
            }
            
            public System.IAsyncResult BeginDoAction(int gameId, int playerId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = gameId;
                _args[1] = playerId;
                System.IAsyncResult _result = base.BeginInvoke("DoAction", _args, callback, asyncState);
                return _result;
            }
            
            public TakiApp.TakiService.MessageList EndDoAction(System.IAsyncResult result) {
                object[] _args = new object[0];
                TakiApp.TakiService.MessageList _result = ((TakiApp.TakiService.MessageList)(base.EndInvoke("DoAction", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("Login", _args, callback, asyncState);
                return _result;
            }
            
            public TakiApp.TakiService.User EndLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                TakiApp.TakiService.User _result = ((TakiApp.TakiService.User)(base.EndInvoke("Login", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogout(int userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("Logout", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndLogout(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Logout", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRegister(string firstName, string lastName, string username, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = firstName;
                _args[1] = lastName;
                _args[2] = username;
                _args[3] = password;
                System.IAsyncResult _result = base.BeginInvoke("Register", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRegister(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Register", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteUser(TakiApp.TakiService.User user, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = user;
                System.IAsyncResult _result = base.BeginInvoke("DeleteUser", _args, callback, asyncState);
                return _result;
            }
            
            public int EndDeleteUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("DeleteUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateUser(TakiApp.TakiService.User user, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = user;
                System.IAsyncResult _result = base.BeginInvoke("UpdateUser", _args, callback, asyncState);
                return _result;
            }
            
            public int EndUpdateUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("UpdateUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPasswordAvailable(string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = password;
                System.IAsyncResult _result = base.BeginInvoke("PasswordAvailable", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndPasswordAvailable(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("PasswordAvailable", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllUserGames(int userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("GetAllUserGames", _args, callback, asyncState);
                return _result;
            }
            
            public TakiApp.TakiService.GameList EndGetAllUserGames(System.IAsyncResult result) {
                object[] _args = new object[0];
                TakiApp.TakiService.GameList _result = ((TakiApp.TakiService.GameList)(base.EndInvoke("GetAllUserGames", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserByUsername(string username, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = username;
                System.IAsyncResult _result = base.BeginInvoke("GetUserByUsername", _args, callback, asyncState);
                return _result;
            }
            
            public TakiApp.TakiService.User EndGetUserByUsername(System.IAsyncResult result) {
                object[] _args = new object[0];
                TakiApp.TakiService.User _result = ((TakiApp.TakiService.User)(base.EndInvoke("GetUserByUsername", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserById(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetUserById", _args, callback, asyncState);
                return _result;
            }
            
            public TakiApp.TakiService.User EndGetUserById(System.IAsyncResult result) {
                object[] _args = new object[0];
                TakiApp.TakiService.User _result = ((TakiApp.TakiService.User)(base.EndInvoke("GetUserById", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUsernameAvailable(string username, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = username;
                System.IAsyncResult _result = base.BeginInvoke("UsernameAvailable", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndUsernameAvailable(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("UsernameAvailable", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllUserFriends(int userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("GetAllUserFriends", _args, callback, asyncState);
                return _result;
            }
            
            public TakiApp.TakiService.UserList EndGetAllUserFriends(System.IAsyncResult result) {
                object[] _args = new object[0];
                TakiApp.TakiService.UserList _result = ((TakiApp.TakiService.UserList)(base.EndInvoke("GetAllUserFriends", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMutualGames(int u1, int u2, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = u1;
                _args[1] = u2;
                System.IAsyncResult _result = base.BeginInvoke("GetMutualGames", _args, callback, asyncState);
                return _result;
            }
            
            public TakiApp.TakiService.GameList EndGetMutualGames(System.IAsyncResult result) {
                object[] _args = new object[0];
                TakiApp.TakiService.GameList _result = ((TakiApp.TakiService.GameList)(base.EndInvoke("GetMutualGames", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAreFriends(int user1Id, int user2Id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = user1Id;
                _args[1] = user2Id;
                System.IAsyncResult _result = base.BeginInvoke("AreFriends", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAreFriends(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AreFriends", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMakeFriends(TakiApp.TakiService.User u1, TakiApp.TakiService.User u2, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = u1;
                _args[1] = u2;
                System.IAsyncResult _result = base.BeginInvoke("MakeFriends", _args, callback, asyncState);
                return _result;
            }
            
            public void EndMakeFriends(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("MakeFriends", _args, result);
            }
            
            public System.IAsyncResult BeginRemoveFriend(TakiApp.TakiService.User u1, TakiApp.TakiService.User u2, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = u1;
                _args[1] = u2;
                System.IAsyncResult _result = base.BeginInvoke("RemoveFriend", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveFriend(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveFriend", _args, result);
            }
            
            public System.IAsyncResult BeginStopSearchingForGame(TakiApp.TakiService.Player p, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = p;
                System.IAsyncResult _result = base.BeginInvoke("StopSearchingForGame", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndStopSearchingForGame(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("StopSearchingForGame", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPlayersFound(int playerCount, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = playerCount;
                System.IAsyncResult _result = base.BeginInvoke("GetPlayersFound", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetPlayersFound(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetPlayersFound", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlayerQuit(TakiApp.TakiService.Player p, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = p;
                System.IAsyncResult _result = base.BeginInvoke("PlayerQuit", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndPlayerQuit(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("PlayerQuit", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllUsers(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllUsers", _args, callback, asyncState);
                return _result;
            }
            
            public TakiApp.TakiService.UserList EndGetAllUsers(System.IAsyncResult result) {
                object[] _args = new object[0];
                TakiApp.TakiService.UserList _result = ((TakiApp.TakiService.UserList)(base.EndInvoke("GetAllUsers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveChanges(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("SaveChanges", _args, callback, asyncState);
                return _result;
            }
            
            public int EndSaveChanges(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("SaveChanges", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IService,
        }
    }
}
